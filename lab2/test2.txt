var go = 30

type (
	tt struct {
		name, name2: string
		name3 : bool
		va : float
	}
)

fufunc partition(arr [6]int, low, high int) [6]int {
	pivot := arr[high]
	i := low
	for j := low; j < high; j++ {
		if arr[j] < pivot {
			arr[i], arr[j] = arr[j], arr[i]
			i++
		}
	}
	arr[i], arr[high] = arr[high], arr[i]
	return arr
}

func quickSort(arr [6]int, low, high int) [6]int {
	if low < high {
		var p int
		arr = partition(arr, low, high)
		arr = quickSort(arr, low, p-1)
		arr = quickSort(arr, p+1, high)
	}
	return arr
}

func quickSortStart(arr [6]int) [6]int {
	return quickSort(arr, 0, 5)
}

func main() {
    quickSortStart([6]int{5, 6, 7, 2, 1, 0})
	return
}nc some(a, b int, c float) {
	a := 10
}

func fibonacci(a int) int {
	if a == 1 {
		return 1
	}
	return a * fibonacci(a - 1)
}

func main() {
	print(go)
	type tt struct {
		name, name2: string
		name3 : bool
	}
	a := 20
	print a
	b := 0.1e10
	c := 0.1
	d := 1e10
	f := "somesring"
	g := true
	r := main
	e, s := (struct {
		name, name2: string
		name3 : bool
	} {name: "somestring", name3: true}), 10
	d + float(s)
	print e.name
	print a
	l := &e
	print a
	(*l).name = "other string"
	print e.name
	var (
		fd tt
	)
	fd = struct {
		name, name2: string
		name3 : bool
	} {name: "fuck", name3: true}
	a++
	print a

	for true; a < 25; true {
		a++
		if a == 22 {
			break
		}
	}
	var arr1 = [2][2]int{
		[2]int{1, 2},
		[2]int{3, 4}}
	var arr2 = [2][2]int{
		[2]int{1, 2},
		[2]int{3, 4}}
	var res [2][2]int
	for i:=0; i < 2; i++ {
		for j:=0; j < 2; j++ {
			res[i][j] = arr1[i][j] * arr2[i][j] * 3
			print res[i][j]
		}
	}

	a = 0
	if a < 10 {
		a := 10
	} else if a == 10 {
		a := 20
	} else {
		a = 1
	}
	a = 20
	a *= 10
	print a
	print fibonacci(10)
	print go
}